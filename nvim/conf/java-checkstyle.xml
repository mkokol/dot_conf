<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE module PUBLIC "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN" "https://checkstyle.org/dtds/configuration_1_3.dtd">
<!--
    Checkstyle configuration that checks the Google coding conventions from Google Java Style
    that can be found at https://google.github.io/styleguide/javaguide.html

    Checkstyle is very configurable. Be sure to read the documentation at
    http://checkstyle.org (or in your downloaded distribution).

    To completely disable a check, just comment it out or delete it from the file.
    To suppress certain violations please review suppression filters.

		Authors: Max Vetrenko, Ruslan Diachenko, Roman Ivanov.
--><module name="Checker">
  <module name="SuppressWarningsFilter"></module>
  <property name="charset" value="UTF-8"></property>
  <property name="severity" value="warning"></property>
  <property name="fileExtensions" value="java, properties, xml"></property>
  <!-- Excludes all 'module-info.java' files              -->
  <!-- See https://checkstyle.org/filefilters/index.html -->
  <module name="BeforeExecutionExclusionFileFilter">
    <property name="fileNamePattern" value="module\-info\.java$"></property>
  </module>
  <!-- https://checkstyle.org/filters/suppressionfilter.html -->
  <module name="SuppressionFilter">
    <property default="checkstyle-suppressions.xml" name="file" value="${org.checkstyle.google.suppressionfilter.config}"></property>
    <property name="optional" value="true"></property>
  </module>
  <!-- Checks for whitespace                               -->
  <!-- See http://checkstyle.org/checks/whitespace/index.html -->
  <module name="FileTabCharacter">
    <property name="eachLine" value="true"></property>
  </module>
  <module name="LineLength">
    <property name="fileExtensions" value="java"></property>
    <property name="max" value="100"></property>
    <property name="ignorePattern" value="^package.*|^import.*|a href|href|http://|https://|ftp://"></property>
  </module>
  <module name="TreeWalker">
    <module name="OuterTypeFilename"></module>
    <module name="IllegalTokenText">
      <property name="tokens" value="STRING_LITERAL, CHAR_LITERAL"></property>
      <property name="format" value="\\u00(09|0(a|A)|0(c|C)|0(d|D)|22|27|5(C|c))|\\(0(10|11|12|14|15|42|47)|134)"></property>
      <property name="message" value="Consider using special escape sequence instead of octal value or Unicode escaped value."></property>
    </module>
    <module name="AvoidEscapedUnicodeCharacters">
      <property name="allowEscapesForControlCharacters" value="true"></property>
      <property name="allowByTailComment" value="true"></property>
      <property name="allowNonPrintableEscapes" value="true"></property>
    </module>
    <module name="AvoidStarImport"></module>
    <module name="OneTopLevelClass"></module>
    <module name="NoLineWrap">
      <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT"></property>
    </module>
    <module name="EmptyBlock">
      <property name="option" value="TEXT"></property>
      <property name="tokens" value="LITERAL_TRY, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE, LITERAL_SWITCH"></property>
    </module>
    <!-- <module name="NeedBraces"> -->
    <!--   <property name="tokens" -->
    <!--            value="LITERAL_DO, LITERAL_ELSE, LITERAL_FOR, LITERAL_IF, LITERAL_WHILE"/> -->
    <!-- </module> -->
    <module name="LeftCurly">
      <property name="tokens" value="ANNOTATION_DEF, CLASS_DEF, CTOR_DEF, ENUM_CONSTANT_DEF, ENUM_DEF,                     INTERFACE_DEF, LAMBDA, LITERAL_CASE, LITERAL_CATCH, LITERAL_DEFAULT,                     LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF,                     LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, METHOD_DEF,                     OBJBLOCK, STATIC_INIT, RECORD_DEF, COMPACT_CTOR_DEF"></property>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlySame"></property>
      <property name="tokens" value="LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, LITERAL_IF, LITERAL_ELSE,                     LITERAL_DO"></property>
    </module>
    <module name="RightCurly">
      <property name="id" value="RightCurlyAlone"></property>
      <property name="option" value="alone"></property>
      <property name="tokens" value="CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,                     INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,                     COMPACT_CTOR_DEF, LITERAL_SWITCH"></property>
    </module>
    <module name="SuppressionXpathSingleFilter">
      <!-- suppresion is required till https://github.com/checkstyle/checkstyle/issues/7541 -->
      <property name="id" value="RightCurlyAlone"></property>
      <property name="query" value="//RCURLY[parent::SLIST[count(./*)=1]                                      or preceding-sibling::*[last()][self::LCURLY]]"></property>
    </module>
    <module name="WhitespaceAfter">
      <property name="tokens" value="COMMA, SEMI, TYPECAST, LITERAL_IF, LITERAL_ELSE, LITERAL_RETURN,                     LITERAL_WHILE, LITERAL_DO, LITERAL_FOR, LITERAL_FINALLY, DO_WHILE, ELLIPSIS,                     LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_CATCH, LAMBDA,                     LITERAL_YIELD, LITERAL_CASE"></property>
    </module>
    <module name="WhitespaceAround">
      <property name="allowEmptyConstructors" value="true"></property>
      <property name="allowEmptyLambdas" value="true"></property>
      <property name="allowEmptyMethods" value="true"></property>
      <property name="allowEmptyTypes" value="true"></property>
      <property name="allowEmptyLoops" value="true"></property>
      <property name="ignoreEnhancedForColon" value="false"></property>
      <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR, BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR,                     BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN, DO_WHILE, EQUAL, GE, GT, LAMBDA, LAND,                     LCURLY, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE, LITERAL_FINALLY,                     LITERAL_FOR, LITERAL_IF, LITERAL_RETURN, LITERAL_SWITCH, LITERAL_SYNCHRONIZED,                     LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS, MINUS_ASSIGN, MOD, MOD_ASSIGN,                     NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION, RCURLY, SL, SLIST, SL_ASSIGN, SR,                     SR_ASSIGN, STAR, STAR_ASSIGN, LITERAL_ASSERT, TYPE_EXTENSION_AND"></property>
      <message key="ws.notFollowed" value="WhitespaceAround: ''{0}'' is not followed by whitespace. Empty blocks                may only be represented as '{}' when not part of a multi-block statement (4.1.3)"></message>
      <message key="ws.notPreceded" value="WhitespaceAround: ''{0}'' is not preceded with whitespace."></message>
    </module>
    <module name="OneStatementPerLine"></module>
    <module name="MultipleVariableDeclarations"></module>
    <module name="ArrayTypeStyle"></module>
    <module name="MissingSwitchDefault"></module>
    <module name="FallThrough"></module>
    <module name="UpperEll"></module>
    <module name="ModifierOrder"></module>
    <module name="EmptyLineSeparator">
      <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF,                     STATIC_INIT, INSTANCE_INIT, METHOD_DEF, CTOR_DEF, VARIABLE_DEF, RECORD_DEF,                     COMPACT_CTOR_DEF"></property>
      <property name="allowNoEmptyLineBetweenFields" value="true"></property>
    </module>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapDot"></property>
      <property name="tokens" value="DOT"></property>
      <property name="option" value="nl"></property>
    </module>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapComma"></property>
      <property name="tokens" value="COMMA"></property>
      <property name="option" value="EOL"></property>
    </module>
    <module name="SeparatorWrap">
      <!-- ELLIPSIS is EOL until https://github.com/google/styleguide/issues/259 -->
      <property name="id" value="SeparatorWrapEllipsis"></property>
      <property name="tokens" value="ELLIPSIS"></property>
      <property name="option" value="EOL"></property>
    </module>
    <module name="SeparatorWrap">
      <!-- ARRAY_DECLARATOR is EOL until https://github.com/google/styleguide/issues/258 -->
      <property name="id" value="SeparatorWrapArrayDeclarator"></property>
      <property name="tokens" value="ARRAY_DECLARATOR"></property>
      <property name="option" value="EOL"></property>
    </module>
    <module name="SeparatorWrap">
      <property name="id" value="SeparatorWrapMethodRef"></property>
      <property name="tokens" value="METHOD_REF"></property>
      <property name="option" value="nl"></property>
    </module>
    <module name="PackageName">
      <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"></property>
      <message key="name.invalidPattern" value="Package name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="TypeName">
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF,                     ANNOTATION_DEF, RECORD_DEF"></property>
      <message key="name.invalidPattern" value="Type name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="MemberName">
      <property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"></property>
      <message key="name.invalidPattern" value="Member name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="ParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Parameter name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="LambdaParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Lambda parameter name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="CatchParameterName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Catch parameter name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="LocalVariableName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Local variable name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="PatternVariableName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Pattern variable name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="ClassTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"></property>
      <message key="name.invalidPattern" value="Class type name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="RecordComponentName">
      <property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"></property>
      <message key="name.invalidPattern" value="Record component name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="RecordTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"></property>
      <message key="name.invalidPattern" value="Record type name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="MethodTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"></property>
      <message key="name.invalidPattern" value="Method type name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="InterfaceTypeParameterName">
      <property name="format" value="(^[A-Z][0-9]?)$|([A-Z][a-zA-Z0-9]*[T]$)"></property>
      <message key="name.invalidPattern" value="Interface type name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="NoFinalizer"></module>
    <module name="GenericWhitespace">
      <message key="ws.followed" value="GenericWhitespace ''{0}'' is followed by whitespace."></message>
      <message key="ws.preceded" value="GenericWhitespace ''{0}'' is preceded with whitespace."></message>
      <message key="ws.illegalFollow" value="GenericWhitespace ''{0}'' should followed by whitespace."></message>
      <message key="ws.notPreceded" value="GenericWhitespace ''{0}'' is not preceded with whitespace."></message>
    </module>
    <module name="Indentation">
      <property name="basicOffset" value="2"></property>
      <property name="braceAdjustment" value="2"></property>
      <property name="caseIndent" value="2"></property>
      <property name="throwsIndent" value="4"></property>
      <property name="lineWrappingIndentation" value="4"></property>
      <property name="arrayInitIndent" value="2"></property>
    </module>
    <module name="AbbreviationAsWordInName">
      <property name="ignoreFinal" value="false"></property>
      <property name="allowedAbbreviationLength" value="0"></property>
      <property name="tokens" value="ANNOTATION_DEF, ANNOTATION_FIELD_DEF,                 PARAMETER_DEF, VARIABLE_DEF, METHOD_DEF, PATTERN_VARIABLE_DEF, RECORD_DEF,                 RECORD_COMPONENT_DEF"></property>
    </module>
    <module name="NoWhitespaceBeforeCaseDefaultColon"></module>
    <module name="OverloadMethodsDeclarationOrder"></module>
    <module name="VariableDeclarationUsageDistance">
      <property name="allowedDistance" value="6"></property>
    </module>
    <module name="CustomImportOrder">
      <property name="sortImportsInGroupAlphabetically" value="false"></property>
      <property name="separateLineBetweenGroups" value="false"></property>
      <property name="customImportOrderRules" value="STATIC###THIRD_PARTY_PACKAGE"></property>
      <property name="tokens" value="IMPORT, STATIC_IMPORT, PACKAGE_DEF"></property>
    </module>
    <module name="MethodParamPad">
      <property name="tokens" value="CTOR_DEF, LITERAL_NEW, METHOD_CALL, METHOD_DEF,                     SUPER_CTOR_CALL, ENUM_CONSTANT_DEF, RECORD_DEF"></property>
    </module>
    <module name="NoWhitespaceBefore">
      <property name="tokens" value="COMMA, SEMI, POST_INC, POST_DEC, DOT,                     LABELED_STAT, METHOD_REF"></property>
      <property name="allowLineBreaks" value="true"></property>
    </module>
    <module name="ParenPad">
      <property name="tokens" value="ANNOTATION, ANNOTATION_FIELD_DEF, CTOR_CALL, CTOR_DEF, DOT, ENUM_CONSTANT_DEF,                     EXPR, LITERAL_CATCH, LITERAL_DO, LITERAL_FOR, LITERAL_IF, LITERAL_NEW,                     LITERAL_SWITCH, LITERAL_SYNCHRONIZED, LITERAL_WHILE, METHOD_CALL,                     METHOD_DEF, QUESTION, RESOURCE_SPECIFICATION, SUPER_CTOR_CALL, LAMBDA,                     RECORD_DEF"></property>
    </module>
    <module name="OperatorWrap">
      <property name="option" value="NL"></property>
      <property name="tokens" value="BAND, BOR, BSR, BXOR, DIV, EQUAL, GE, GT, LAND, LE, LITERAL_INSTANCEOF, LOR,                     LT, MINUS, MOD, NOT_EQUAL, PLUS, QUESTION, SL, SR, STAR, METHOD_REF,                     TYPE_EXTENSION_AND "></property>
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationMostCases"></property>
      <property name="tokens" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF,                       RECORD_DEF, COMPACT_CTOR_DEF"></property>
    </module>
    <module name="AnnotationLocation">
      <property name="id" value="AnnotationLocationVariables"></property>
      <property name="tokens" value="VARIABLE_DEF"></property>
      <property name="allowSamelineMultipleAnnotations" value="true"></property>
    </module>
    <module name="NonEmptyAtclauseDescription"></module>
    <module name="InvalidJavadocPosition"></module>
    <module name="JavadocTagContinuationIndentation"></module>
    <module name="SummaryJavadoc">
      <property name="forbiddenSummaryFragments" value="^@return the *|^This method returns |^A [{]@code [a-zA-Z0-9]+[}]( is a )"></property>
    </module>
    <module name="JavadocParagraph"></module>
    <module name="RequireEmptyLineBeforeBlockTagGroup"></module>
    <module name="AtclauseOrder">
      <property name="tagOrder" value="@param, @return, @throws, @deprecated"></property>
      <property name="target" value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, METHOD_DEF, CTOR_DEF, VARIABLE_DEF"></property>
    </module>
    <module name="JavadocMethod">
      <property name="accessModifiers" value="public"></property>
      <property name="allowMissingParamTags" value="true"></property>
      <property name="allowMissingReturnTag" value="true"></property>
      <property name="allowedAnnotations" value="Override, Test"></property>
      <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, COMPACT_CTOR_DEF"></property>
    </module>
    <!-- <module name="MissingJavadocMethod"> -->
    <!--   <property name="scope" value="public"/> -->
    <!--   <property name="minLineCount" value="2"/> -->
    <!--   <property name="allowedAnnotations" value="Override, Test"/> -->
    <!--   <property name="tokens" value="METHOD_DEF, CTOR_DEF, ANNOTATION_FIELD_DEF, -->
    <!--                                COMPACT_CTOR_DEF"/> -->
    <!-- </module> -->
    <!-- <module name="MissingJavadocType"> -->
    <!--   <property name="scope" value="protected"/> -->
    <!--   <property name="tokens" -->
    <!--             value="CLASS_DEF, INTERFACE_DEF, ENUM_DEF, -->
    <!--                   RECORD_DEF, ANNOTATION_DEF"/> -->
    <!--   <property name="excludeScope" value="nothing"/> -->
    <!-- </module> -->
    <module name="MethodName">
      <property name="format" value="^[a-z][a-z0-9]\w*$"></property>
      <message key="name.invalidPattern" value="Method name ''{0}'' must match pattern ''{1}''."></message>
    </module>
    <module name="SingleLineJavadoc"></module>
    <module name="EmptyCatchBlock">
      <property name="exceptionVariableName" value="expected"></property>
    </module>
    <module name="CommentsIndentation">
      <property name="tokens" value="SINGLE_LINE_COMMENT, BLOCK_COMMENT_BEGIN"></property>
    </module>
    <!-- https://checkstyle.org/filters/suppressionxpathfilter.html -->
    <module name="SuppressionXpathFilter">
      <property default="checkstyle-xpath-suppressions.xml" name="file" value="${org.checkstyle.google.suppressionxpathfilter.config}"></property>
      <property name="optional" value="true"></property>
    </module>
    <module name="SuppressWarningsHolder"></module>
    <module name="SuppressionCommentFilter">
      <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"></property>
      <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"></property>
      <property name="checkFormat" value="$1"></property>
    </module>
    <module name="SuppressWithNearbyCommentFilter">
      <property name="commentFormat" value="CHECKSTYLE.SUPPRESS\: ([\w\|]+)"></property>
      <!-- $1 refers to the first match group in the regex defined in commentFormat -->
      <property name="checkFormat" value="$1"></property>
      <!-- The check is suppressed in the next line of code after the comment -->
      <property name="influenceFormat" value="1"></property>
    </module>
  </module>
</module>
